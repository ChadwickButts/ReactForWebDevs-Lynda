{"version":3,"sources":["hotel.js"],"names":["CONFIG","apiUrl","PostForm","props","typeOptions","Object","keys","messageTypes","map","key","hasOwnProperty","defaultType","React","useState","messageText","setMessageText","messageType","setMessageType","onTextChange","evt","target","value","onTypeChange","postStatusUpdate","preventDefault","newStatus","msg","type","time","date","format","Date","axios","post","then","response","data","success","id","addStatusMessage","StatusMessage","statusDate","parse","dateFormat","StatusMessageList","displayStatusMessages","statuses","status","loaded","StatusMessageManager","management","dining","ops","plumbing","pool","setStatuses","setLoaded","useEffect","retrieveStatusMessages","get","updatedStatuses","slice","push","ReactDOM","render","document","getElementById"],"mappings":"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","sourcesContent":["(function() {\n  \"use strict\";\n\n  var CONFIG = {\n    apiUrl: \"http://localhost/reactjs/status_api\"\n  };\n\n  function PostForm(props) {\n    var typeOptions = Object.keys(props.messageTypes).map(function(key) {\n      if (props.messageTypes.hasOwnProperty(key)) {\n        return (\n          <option key={key} value={key}>\n            {props.messageTypes[key]}\n          </option>\n        );\n      }\n    });\n\n    // so we don't have to type this over and over\n    var defaultType = typeOptions[0].key;\n\n    var [messageText, setMessageText] = React.useState(\"\");\n    var [messageType, setMessageType] = React.useState(defaultType);\n\n    function onTextChange(evt) {\n      setMessageText(evt.target.value);\n    }\n\n    function onTypeChange(evt) {\n      setMessageType(evt.target.value);\n    }\n\n    function postStatusUpdate(evt) {\n      evt.preventDefault();\n\n      var newStatus = {\n        msg: messageText,\n        type: messageType,\n        time: date.format(new Date(), \"YYYY-MM-DD, HH:mm\")\n      };\n\n      axios.post(CONFIG.apiUrl + \"/post.php\", newStatus).then(function(response) {\n        if (response.data.success) {\n          // Update list of messages\n          newStatus.id = response.data.id;\n          props.addStatusMessage(newStatus);\n\n          // reset the form values\n          setMessageText(\"\");\n          setMessageType(defaultType);\n        }\n      });\n    }\n\n    return (\n      <form onSubmit={postStatusUpdate}>\n        <h3>Post an Update</h3>\n\n        <div className=\"field-group\">\n          <label htmlFor=\"txt-message\">Message</label>\n          <textarea\n            id=\"txt-message\"\n            rows=\"2\"\n            onChange={onTextChange}\n            value={messageText}\n          />\n        </div>\n\n        <div className=\"field-group\">\n          <label htmlFor=\"txt-type\">Type</label>\n          <select id=\"txt-type\" onChange={onTypeChange} value={messageType}>\n            {typeOptions}\n          </select>\n        </div>\n\n        <div className=\"field-group action\">\n          <input type=\"submit\" value=\"Post Update\" />\n        </div>\n      </form>\n    );\n  }\n\n  function StatusMessage(props) {\n    var statusDate = date.parse(props.time, \"YYYY-MM-DD, HH:mm\"),\n      dateFormat = \"M/D/Y, h:mm A\";\n\n    return (\n      <div className=\"status-message\">\n        {props.msg}\n        <span className=\"name\">— {props.type}</span>\n        <span className=\"time\">{date.format(statusDate, dateFormat)}</span>\n      </div>\n    );\n  }\n\n  function StatusMessageList(props) {\n    function displayStatusMessages() {\n      return props.statuses.map(function(status) {\n        return (\n          <li key={status.id}>\n            <StatusMessage\n              msg={status.msg}\n              type={props.messageTypes[status.type]}\n              time={status.time}\n            />\n          </li>\n        );\n      });\n    }\n\n    if (props.loaded) {\n      return <ul id=\"status-list\">{displayStatusMessages()}</ul>;\n    } else {\n      return (\n        <div id=\"status-list\" className=\"loading\">\n          Loading...\n          <div className=\"spinner\">\n            <div className=\"bounce1\" />\n            <div className=\"bounce2\" />\n            <div className=\"bounce3\" />\n          </div>\n        </div>\n      );\n    }\n  }\n\n  function StatusMessageManager(props) {\n    var messageTypes = {\n      management: \"Management\",\n      dining: \"Dining Services\",\n      ops: \"Operations\",\n      plumbing: \"Plumbing\",\n      pool: \"Pool\"\n    };\n\n    var [statuses, setStatuses] = React.useState([]);\n    var [loaded, setLoaded] = React.useState(false);\n\n    React.useEffect(function() {\n      retrieveStatusMessages();\n    }, []);\n\n    function retrieveStatusMessages() {\n      axios.get(CONFIG.apiUrl + \"/get.php?delay=5\").then(function(response) {\n        setStatuses(response.data);\n        setLoaded(true);\n      });\n    }\n\n    function addStatusMessage(status) {\n      var updatedStatuses = statuses.slice(0);\n\n      updatedStatuses.push(status);\n\n      setStatuses(updatedStatuses);\n    }\n\n    return (\n      <React.Fragment>\n        <div id=\"post-status\">\n          <PostForm messageTypes={messageTypes} addStatusMessage={addStatusMessage} />\n        </div>\n        <StatusMessageList\n          messageTypes={messageTypes}\n          statuses={statuses}\n          loaded={loaded}\n        />\n      </React.Fragment>\n    );\n  }\n\n  ReactDOM.render(\n    <StatusMessageManager />,\n    document.getElementById(\"react-statusmanager\")\n  );\n})();\n"]}